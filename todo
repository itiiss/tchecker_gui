1. 多个画布对应 processes 对象                                                                             │
   │    “那么需要有多个自动机的画布来对应process数组是吗”                                                          │
   │    (注：你的模型里 processes 是一个对象，而不是数组，这样用进程名作为 key 更方便，但核心思想不变)             │
   │                                                                                                               │
   │    是的，你需要为每个 process 提供一个独立的、可视化的编辑区域或“画布”。                                      │
   │                                                                                                               │
   │    这是构建并发系统建模工具的标准且最直观的方式。用户可以专注于设计一个进程的行为，而不会被其他进程的复杂性所 │
   │    干扰。                                                                                                     │
   │                                                                                                               │
   │    推荐的UI实现方式：使用标签页 (Tabs) 界面                                                                   │
   │                                                                                                               │
   │    左侧或顶部有一个进程列表：显示当前模型中所有的进程（即 processes 对象的 key 列表，如 train,                │
   │    gate）。用户可以通过一个“+”按钮来添加新进程。                                                              │
   │                                                                                                               │
   │    主编辑区是标签页容器：                                                                                     │
   │                                                                                                               │
   │    当用户在进程列表中点击一个进程（比如 train），主编辑区会打开一个属于 train 的标签页。                      │
   │                                                                                                               │
   │    每个标签页内部就是一个画布，用户可以在上面通过拖拽的方式创建该进程的位置（节点/圆圈）和边（转换/箭头）。   │
   │                                                                                                               │
   │    用户可以方便地在 train 和 gate 的标签页之间切换，来分别编辑它们各自的自动机。                              │
   │                                                                                                               │
   │    2. 全局定义区域                                                                                            │
   │    “然后其他字段放到一个类似于uppaall的全局定义的地方去填写就行了”                                            │
   │                                                                                                               │
   │    完全正确。 将全局配置和具体的进程定义分离开，是优秀的设计。这让模型的结构非常清晰。                        │
   │                                                                                                               │
   │    推荐的UI实现方式：使用侧边栏面板                                                                           │
   │                                                                                                               │
   │    在UI布局上，你可以借鉴 UPPAAL 的做法，设置一个侧边栏或一个专门的面板来管理这些全局和系统级别的定义。这个面 │
   │    板可以包含以下几个部分，完全对应你 JSON 模型中的字段：                                                     │
   │                                                                                                               │
   │    systemName: 面板顶部的一个简单的文本输入框。                                                               │
   │                                                                                                               │
   │    clocks / intVars / events:                                                                                 │
   │                                                                                                               │
   │    可以设计成三个可折叠的列表或表格。                                                                         │
   │                                                                                                               │
   │    每个列表都有一个“添加”按钮（例如 [+] 添加时钟）。                                                          │
   │                                                                                                               │
   │    点击后，弹出一个小表单，让用户填写必要的信息（例如，时钟的 name 和 size；整数变量的 name, min, max,        │
   │    initial 等）。                                                                                             │
   │                                                                                                               │
   │    列表中的每一项都可以被选中、编辑或删除。                                                                   │
   │                                                                                                               │
   │    synchronizations:                                                                                          │
   │                                                                                                               │
   │    同样是一个列表。                                                                                           │
   │                                                                                                               │
   │    点击“添加同步”后，提供一个文本框让用户输入同步约束字符串，例如                                             │
   │    train@approach:gate@approach；这个UI设计与你的 AutomatonModel JSON 结构完美契合（Zustand                   │
   │    会非常适合管理这个JSON对象）：                                                                             │
   │                                                                                                               │
   │    当用户在左侧边栏添加一个 clock，你的代码就向 AutomatonModel.clocks 数组中 push 一个新对象。                │
   │                                                                                                               │
   │    当用户在主编辑区添加一个新标签页 p3，你的代码就在 AutomatonModel.processes 对象中增加一个 p3: { locations: │
   │     {}, edges: [] } 的新条目。                                                                                │
   │                                                                                                               │
   │    当用户在 train 的画布上画一个新位置 l3，你的代码就在 AutomatonModel.processes.train.locations              │
   │    对象中增加一个 l3: {}                                                                                      │
   │    的新条目。；
2. process tab放到左边，支持新建空的process，即一个空的画布；左边最上面的tab叫decalrtion，点击该tab后，右边的 │
   │    canvas变成编辑clock，sync等的字段；